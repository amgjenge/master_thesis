moving_average <- function(x, n = 4){stats :: filter(x, rep(1 / n, n), sides = 2)}
################################################################################
########################## Read data    #######################################
################################################################################
read_df <- function(string_name) {
#' Function to read and format csv files
#'@param string_name: String, name of csv file
#'
df <- read.csv2(string_name, encoding="UTF-8")
colnames(df) <- "raw"
df %<>% as_tibble()
df %<>% mutate(år       =  as.numeric(sapply(strsplit(raw, ","), `[`, 1)),
frekvens = as.numeric(sapply(strsplit(raw, ","), `[`, 2)),
moving_average = slider::slide_dbl(frekvens, mean,
.before = 4, .after = 4, .complete = TRUE)) %>%
dplyr::select(år, frekvens, moving_average)
return (df)
}
files <- dir_ls(path = "1810-2013 data", regexp = "csv") # Get file names of all .csv files
split_name <- function(x) {
#' Splits a character string by '/' and '.'
((x %>% str_split(., "/"))[[1]][2] %>% strsplit(., ".", fixed = TRUE))[[1]][1]
}
manual_combination <- function(fileList, startyear) {
#' Read files and combines timeseries into a single dataframe.
#' The new dataframe is organized by rows (as a pivot_longer in tidyverse lingo)
df <- NULL
for(file in fileList) {
df <- df %>% bind_rows(read_df(file) %>% mutate(søkeuttrykk = split_name(file))                  )
}
df %<>%
as_tibble() %>%
filter(år >= startyear) %>%
dplyr::select(søkeuttrykk, år, frekvens, moving_average)
return (df)
}
total_df <- manual_combination(files, 1920)
color_palette <- c("black", "orange") # Colors for graphs
make_plot <- function(df, name) {
#' Generate predetermined ggplot
#' @param df: input dataframe
#' @param name: string, title of plot
graph <- df %>%
ggplot() +
geom_line(size = 0.8, aes(x = år, y = moving_average, color = "Glidende Gjennomsnitt T  = 4")) +
geom_point(aes(x = år, y = frekvens, color = "Observert frekvens")) +
labs(title = name, x = "År", y = "Frekvens") +
guides(col = guide_legend("Serier")) +
scale_colour_manual(values = color_palette) +
scale_x_continuous(n.breaks =  10) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw()
return (graph +  theme(legend.position = "bottom"))
}
process_frames <- function(df) {
#' Function that reads a df and generates a new dataframe based on the first columns value.
#' A time series graph is made for every unique word by calling make_plot and rendered as a PNG
#'
datasets <- unique(df[1])
for (i in 1:nrow(datasets)) {
plot_data <- df %>%
filter(søkeuttrykk == datasets[[1]][i])
name <-
print(datasets[[1]][i])
make_plot(plot_data, paste(datasets[[1]][i]))
ggsave(path = "graf_output/", filename= paste(datasets[[1]][i], ".png", sep = ""),  type = "cairo-png")
}
}
process_frames(total_df)
# ------------------------------- R script for visualization ------------------------------
source(data_assembly)
# ------------------------------- R script for visualization ------------------------------
source("data_assembly.r")
# ------------------------------- R script for visualization ------------------------------
source("data_assembly.r") # import data
####################################################################################################
##################################### Individual time series ########################################
####################################################################################################
color_palette <- c("black", "orange") # Colors for graphs
make_plot <- function(df, name) {
#' Generate predetermined ggplot
#' @param df: input dataframe
#' @param name: string, title of plot
graph <- df %>%
ggplot() +
geom_line(size = 0.8, aes(x = år, y = moving_average, color = "Glidende Gjennomsnitt T  = 4")) +
geom_point(aes(x = år, y = frekvens, color = "Observert frekvens")) +
labs(title = name, x = "År", y = "Frekvens") +
guides(col = guide_legend("Serier")) +
scale_colour_manual(values = color_palette) +
scale_x_continuous(n.breaks =  10) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw()
return (graph +  theme(legend.position = "bottom"))
}
process_frames <- function(df) {
#' Function that reads a df and generates a new dataframe based on the first columns value.
#' A time series graph is made for every unique word by calling make_plot and rendered as a PNG
#'
datasets <- unique(df[1])
for (i in 1:nrow(datasets)) {
plot_data <- df %>%
filter(søkeuttrykk == datasets[[1]][i])
name <-
print(datasets[[1]][i])
make_plot(plot_data, paste(datasets[[1]][i]))
ggsave(path = "graf_output/", filename= paste(datasets[[1]][i], ".png", sep = ""),  type = "cairo-png")
}
}
process_frames(total_df)
####################################################################################################
##################################### Log transformation ###########################################
####################################################################################################
max_no_NA <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA) # Filters NA before finding max
min_no_NA <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA) # Filters NA before finding minimum
normalize <-function(x) {
#'
#'Normalization  function
#'@x: a vector
(x -min_no_NA(x))/(max_no_NA(x)-min_no_NA(x))
}
series1_names <- c("Kontordame", "Yrkeskvinne", "Sykesøster", "Butikkdame", "Forkvinne", "Husmor")
series2_names <- c("Kvinnelig prest", "Kvinnelig lærer", "Kvinnelig arbeider", "Kvinnelig formann", "Kvinnelig forfatter", "Kvinnelig sykepleier")
selected_series_1 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series1_names) %>%
filter(!is.na(frekvens)) %>%
mutate(frekvens = normalize(frekvens))
selected_series_2 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series2_names) %>%
filter(!is.na(frekvens)) %>%
mutate(frekvens = normalize(frekvens))
##### Log transform series ######
log_norm_selected_series_1 <- selected_series_1 %>% mutate(frekvens = log(frekvens))
log_norm_selected_series_2 <- selected_series_2 %>% mutate(frekvens = log(frekvens))
normalized_plot <- function(df, name, g_title) {
df %>%
rename("Søkeuttryk" = "søkeuttrykk")  %>%
ggplot(aes(x = år, y = frekvens, group = Søkeuttryk, color = Søkeuttryk)) +
geom_line() +
labs(title = g_title, x = "År", y = "Frekvens") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw() +
theme(legend.position = "bottom")
ggsave(path = "normaliserte plot/", filename= paste(name, ".png", sep = ""),  dpi = 600, width = 20, height = 10, type = "cairo-png")
}
###### Render log-transformed plots ######
## Series 1
normalized_plot(log_norm_selected_series_1, "log_norm_plott_1", "Log-transformert plot av utvalgte søkeord")
## Series 2
normalized_plot(log_norm_selected_series_2, "log_norm_plott_2", "Log-transformert plot av utvalgte søkeord")
normalized_plot <- function(df, name, g_title) {
df %>%
rename("Søkeuttryk" = "søkeuttrykk")  %>%
ggplot(aes(x = år, y = frekvens, group = Søkeuttryk, color = Søkeuttryk)) +
geom_line() +
labs(title = g_title, x = "År", y = "Frekvens") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw() +
theme(legend.position = "bottom")
ggsave(path = "log-transformerte plot/", filename= paste(name, ".png", sep = ""),  dpi = 600, width = 20, height = 10, type = "cairo-png")
}
###### Render log-transformed plots ######
## Series 1
normalized_plot(log_norm_selected_series_1, "log_norm_plott_1", "Log-transformert plot av utvalgte søkeord")
## Series 2
normalized_plot(log_norm_selected_series_2, "log_norm_plott_2", "Log-transformert plot av utvalgte søkeord")
total_df %>% tibble::view()
# ------------------------------- Data assembly and treatment R script ------------------------------
# Libraries --------------------
library(readxl)
library(fs)
library(tidyverse)
library(fable)
library(dplyr)
library(openxlsx)
library(magrittr)
library(Cairo)
library(ggplot2)
library(lubridate)
library(scales)
library(caret)
################################################################################
########################## Read data    #######################################
################################################################################
read_df <- function(string_name) {
#' Function to read and format csv files
#'@param string_name: String, name of csv file
#'
df <- read.csv2(string_name, encoding="UTF-8")
colnames(df) <- "raw"
df %<>% as_tibble()
df %<>% mutate(år       =  as.numeric(sapply(strsplit(raw, ","), `[`, 1)),
frekvens = as.numeric(sapply(strsplit(raw, ","), `[`, 2)),
glattet_frekvens = slider::slide_dbl(frekvens, mean,
.before = 4, .after = 4, .complete = TRUE)) %>%
dplyr::select(år, frekvens, glattet_frekvens)
return (df)
}
files <- dir_ls(path = "1810-2013 data", regexp = "csv") # Get file names of all .csv files
split_name <- function(x) {
#' Splits a character string by '/' and '.'
((x %>% str_split(., "/"))[[1]][2] %>% strsplit(., ".", fixed = TRUE))[[1]][1]
}
manual_combination <- function(fileList, startyear) {
#' Read files and combines timeseries into a single dataframe.
#' The new dataframe is organized by rows (as a pivot_longer in tidyverse lingo)
df <- NULL
for(file in fileList) {
df <- df %>% bind_rows(read_df(file) %>% mutate(søkeuttrykk = split_name(file))                  )
}
df %<>%
as_tibble() %>%
filter(år >= startyear) %>%
dplyr::select(søkeuttrykk, år, frekvens, glattet_frekvens)
return (df)
}
total_df <- manual_combination(files, 1920)
## Pivot wider
wide_total_df <- total_df %>% pivot_wider(names_from = "søkeuttrykk",
values_from = c("år", "frekvens", "glattet_frekvens"))
View(wide_total_df)
View(total_df)
# ------------------------------- R script for visualization ------------------------------
source("data_assembly.r") # import data
####################################################################################################
##################################### Individual time series ########################################
####################################################################################################
color_palette <- c("black", "orange") # Colors for graphs
make_plot <- function(df, name) {
#' Generate predetermined ggplot
#' @param df: input dataframe
#' @param name: string, title of plot
graph <- df %>%
ggplot() +
geom_line(size = 0.8, aes(x = år, y = moving_average, color = "Glidende Gjennomsnitt T  = 4")) +
geom_point(aes(x = år, y = frekvens, color = "Observert frekvens")) +
labs(title = name, x = "År", y = "Frekvens") +
guides(col = guide_legend("Serier")) +
scale_colour_manual(values = color_palette) +
scale_x_continuous(n.breaks =  10) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw()
return (graph +  theme(legend.position = "bottom"))
}
process_frames <- function(df) {
#' Function that reads a df and generates a new dataframe based on the first columns value.
#' A time series graph is made for every unique word by calling make_plot and rendered as a PNG
#'
datasets <- unique(df[1])
for (i in 1:nrow(datasets)) {
plot_data <- df %>%
filter(søkeuttrykk == datasets[[1]][i])
name <-
print(datasets[[1]][i])
make_plot(plot_data, paste(datasets[[1]][i]))
ggsave(path = "graf_output/", filename= paste(datasets[[1]][i], ".png", sep = ""),  type = "cairo-png")
}
}
process_frames(total_df)
####################################################################################################
##################################### Log transformation ###########################################
####################################################################################################
max_no_NA <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA) # Filters NA before finding max
min_no_NA <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA) # Filters NA before finding minimum
normalize <-function(x) {
#'
#'Normalization  function
#'@x: a vector
(x -min_no_NA(x))/(max_no_NA(x)-min_no_NA(x))
}
series1_names <- c("Kontordame", "Yrkeskvinne", "Sykesøster", "Butikkdame", "Forkvinne", "Husmor")
series2_names <- c("Kvinnelig prest", "Kvinnelig lærer", "Kvinnelig arbeider", "Kvinnelig formann", "Kvinnelig forfatter", "Kvinnelig sykepleier")
selected_series_1 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series1_names) %>%
filter(!is.na(frekvens)) %>%
mutate(frekvens = normalize(frekvens))
selected_series_2 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series2_names) %>%
filter(!is.na(frekvens)) %>%
mutate(frekvens = normalize(frekvens))
##### Log transform series ######
log_norm_selected_series_1 <- selected_series_1 %>% mutate(frekvens = log(frekvens))
log_norm_selected_series_2 <- selected_series_2 %>% mutate(frekvens = log(frekvens))
normalized_plot <- function(df, name, g_title) {
df %>%
rename("Søkeuttryk" = "søkeuttrykk")  %>%
ggplot(aes(x = år, y = frekvens, group = Søkeuttryk, color = Søkeuttryk)) +
geom_line() +
labs(title = g_title, x = "År", y = "Frekvens") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw() +
theme(legend.position = "bottom")
ggsave(path = "log-transformerte plot/", filename= paste(name, ".png", sep = ""),  dpi = 600, width = 20, height = 10, type = "cairo-png")
}
###### Render log-transformed plots ######
## Series 1
normalized_plot(log_norm_selected_series_1, "log_norm_plott_1", "Log-transformert plot av utvalgte søkeord")
## Series 2
normalized_plot(log_norm_selected_series_2, "log_norm_plott_2", "Log-transformert plot av utvalgte søkeord")
process_frames(total_df)
# ------------------------------- R script for visualization ------------------------------
source("data_assembly.r") # import data
####################################################################################################
##################################### Individual time series ########################################
####################################################################################################
color_palette <- c("black", "orange") # Colors for graphs
make_plot <- function(df, name) {
#' Generate predetermined ggplot
#' @param df: input dataframe
#' @param name: string, title of plot
graph <- df %>%
ggplot() +
geom_line(size = 0.8, aes(x = år, y = glattet_frekvens, color = "Glattet serie T  = 4")) +
geom_point(aes(x = år, y = frekvens, color = "Observert frekvens")) +
labs(title = name, x = "År", y = "Frekvens") +
guides(col = guide_legend("Serier")) +
scale_colour_manual(values = color_palette) +
scale_x_continuous(n.breaks =  10) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw()
return (graph +  theme(legend.position = "bottom"))
}
process_frames <- function(df) {
#' Function that reads a df and generates a new dataframe based on the first columns value.
#' A time series graph is made for every unique word by calling make_plot and rendered as a PNG
#'
datasets <- unique(df[1])
for (i in 1:nrow(datasets)) {
plot_data <- df %>%
filter(søkeuttrykk == datasets[[1]][i])
name <-
print(datasets[[1]][i])
make_plot(plot_data, paste(datasets[[1]][i]))
ggsave(path = "graf_output/", filename= paste(datasets[[1]][i], ".png", sep = ""),  type = "cairo-png")
}
}
process_frames(total_df)
####################################################################################################
##################################### Log transformation ###########################################
####################################################################################################
max_no_NA <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA) # Filters NA before finding max
min_no_NA <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA) # Filters NA before finding minimum
normalize <-function(x) {
#'
#'Normalization  function
#'@x: a vector
(x -min_no_NA(x))/(max_no_NA(x)-min_no_NA(x))
}
series1_names <- c("Kontordame", "Yrkeskvinne", "Sykesøster", "Butikkdame", "Forkvinne", "Husmor")
series2_names <- c("Kvinnelig prest", "Kvinnelig lærer", "Kvinnelig arbeider", "Kvinnelig formann", "Kvinnelig forfatter", "Kvinnelig sykepleier")
selected_series_1 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series1_names) %>%
filter(!is.na(frekvens)) %>%
mutate(frekvens = normalize(frekvens))
selected_series_2 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series2_names) %>%
filter(!is.na(frekvens)) %>%
mutate(frekvens = normalize(frekvens))
##### Log transform series ######
log_norm_selected_series_1 <- selected_series_1 %>% mutate(frekvens = log(frekvens))
log_norm_selected_series_2 <- selected_series_2 %>% mutate(frekvens = log(frekvens))
normalized_plot <- function(df, name, g_title) {
df %>%
rename("Søkeuttryk" = "søkeuttrykk")  %>%
ggplot(aes(x = år, y = frekvens, group = Søkeuttryk, color = Søkeuttryk)) +
geom_line() +
labs(title = g_title, x = "År", y = "Frekvens") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw() +
theme(legend.position = "bottom")
ggsave(path = "log-transformerte plot/", filename= paste(name, ".png", sep = ""),  dpi = 600, width = 20, height = 10, type = "cairo-png")
}
###### Render log-transformed plots ######
## Series 1
normalized_plot(log_norm_selected_series_1, "log_norm_plott_1", "Log-transformert plot av utvalgte søkeord")
## Series 2
normalized_plot(log_norm_selected_series_2, "log_norm_plott_2", "Log-transformert plot av utvalgte søkeord")
# ------------------------------- R script for visualization ------------------------------
source("data_assembly.r") # import data
####################################################################################################
##################################### Individual time series ########################################
####################################################################################################
color_palette <- c("black", "orange") # Colors for graphs
make_plot <- function(df, name) {
#' Generate predetermined ggplot
#' @param df: input dataframe
#' @param name: string, title of plot
graph <- df %>%
ggplot() +
geom_line(size = 0.8, aes(x = år, y = glattet_frekvens, color = "Glattet serie T  = 4")) +
geom_point(aes(x = år, y = frekvens, color = "Observert frekvens")) +
labs(title = name, x = "År", y = "Frekvens") +
guides(col = guide_legend("Serier")) +
scale_colour_manual(values = color_palette) +
scale_x_continuous(n.breaks =  10) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw()
return (graph +  theme(legend.position = "bottom"))
}
process_frames <- function(df) {
#' Function that reads a df and generates a new dataframe based on the first columns value.
#' A time series graph is made for every unique word by calling make_plot and rendered as a PNG
#'
datasets <- unique(df[1])
for (i in 1:nrow(datasets)) {
plot_data <- df %>%
filter(søkeuttrykk == datasets[[1]][i])
name <-
print(datasets[[1]][i])
make_plot(plot_data, paste(datasets[[1]][i]))
ggsave(path = "graf_output/", filename= paste(datasets[[1]][i], ".png", sep = ""),  type = "cairo-png")
}
}
process_frames(total_df)
####################################################################################################
##################################### Log transformation ###########################################
####################################################################################################
max_no_NA <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA) # Filters NA before finding max
min_no_NA <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA) # Filters NA before finding minimum
normalize <-function(x) {
#'
#'Normalization  function
#'@x: a vector
(x -min_no_NA(x))/(max_no_NA(x)-min_no_NA(x))
}
series1_names <- c("Kontordame", "Yrkeskvinne", "Sykesøster", "Butikkdame", "Forkvinne", "Husmor")
series2_names <- c("Kvinnelig prest", "Kvinnelig lærer", "Kvinnelig arbeider", "Kvinnelig formann", "Kvinnelig forfatter", "Kvinnelig sykepleier")
selected_series_1 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series1_names) %>%
filter(!is.na(frekvens)) %>%
mutate(frekvens = normalize(frekvens))
selected_series_2 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series2_names) %>%
filter(!is.na(frekvens)) %>%
mutate(frekvens = normalize(frekvens))
##### Log transform series ######
log_norm_selected_series_1 <- selected_series_1 %>% mutate(frekvens = log(frekvens))
log_norm_selected_series_2 <- selected_series_2 %>% mutate(frekvens = log(frekvens))
normalized_plot <- function(df, name, g_title) {
df %>%
rename("Søkeuttryk" = "søkeuttrykk")  %>%
ggplot(aes(x = år, y = frekvens, group = Søkeuttryk, color = Søkeuttryk)) +
geom_line() +
labs(title = g_title, x = "År", y = "Frekvens") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw() +
theme(legend.position = "bottom")
ggsave(path = "log-transformerte plot/", filename= paste(name, ".png", sep = ""),  dpi = 600, width = 20, height = 10, type = "cairo-png")
}
###### Render log-transformed plots ######
## Series 1
normalized_plot(log_norm_selected_series_1, "log_norm_plott_1", "Log-transformert plot av utvalgte søkeord")
## Series 2
normalized_plot(log_norm_selected_series_2, "log_norm_plott_2", "Log-transformert plot av utvalgte søkeord")
wide_total_df <- total_df %>% pivot_wider(names_from = "søkeuttrykk",
values_from = c("frekvens", "glattet_frekvens"))
View(wide_total_df)
wide_total_df <- total_df %>% pivot_wider(names_from = "søkeuttrykk",
values_from = c("frekvens"))
View(wide_total_df)
wide_total_df <- total_df %>% dplyr::select(år, frekvens) %>%  pivot_wider(names_from = "søkeuttrykk",
values_from = c("frekvens"))
wide_total_df <- total_df %>% dplyr::select(søkeuttrkk, år, frekvens) %>%  pivot_wider(names_from = "søkeuttrykk",
values_from = c("frekvens"))
wide_total_df <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%  pivot_wider(names_from = "søkeuttrykk",
values_from = c("frekvens"))
View(wide_total_df)
write.csv(wide_total_df, "samlet_datasett.csv", row.names = FALSE)
library(xlsx)
help("write.xlsx")
write.xlsx(wide_total_df, "samlet_datasett.csv", row.names = FALSE)
write.xlsx(wide_total_df, "samlet_datasett.xlsx", row.names = FALSE)
write.xlsx(wide_total_df, file =  "samlet_datasett.xlsx", row.names = FALSE)
openxlsx::write.xlsx(wide_total_df, file =  "samlet_datasett.xlsx", row.names = FALSE)
####################################################################################################
##################################### Log transformation ###########################################
####################################################################################################
max_no_NA <- function(x) ifelse( !all(is.na(x)), max(x, na.rm=T), NA) # Filters NA before finding max
min_no_NA <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA) # Filters NA before finding minimum
normalize <-function(x) {
#'
#'Normalization  function
#'@x: a vector
(x -min_no_NA(x))/(max_no_NA(x)-min_no_NA(x))
}
series1_names <- c("Kontordame", "Yrkeskvinne", "Sykesøster", "Butikkdame", "Forkvinne", "Husmor")
series2_names <- c("Kvinnelig prest", "Kvinnelig lærer", "Kvinnelig arbeider", "Kvinnelig formann", "Kvinnelig forfatter", "Kvinnelig sykepleier")
selected_series_1 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series1_names) %>%
filter(!is.na(frekvens))
selected_series_2 <- total_df %>% dplyr::select(søkeuttrykk, år, frekvens) %>%
filter(søkeuttrykk %in% series2_names) %>%
filter(!is.na(frekvens))
##### Log transform series ######
log_norm_selected_series_1 <- selected_series_1 %>% mutate(frekvens = log(frekvens))
log_norm_selected_series_2 <- selected_series_2 %>% mutate(frekvens = log(frekvens))
normalized_plot <- function(df, name, g_title) {
df %>%
rename("Søkeuttryk" = "søkeuttrykk")  %>%
ggplot(aes(x = år, y = frekvens, group = Søkeuttryk, color = Søkeuttryk)) +
geom_line() +
labs(title = g_title, x = "År", y = "Frekvens") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE), n.breaks = 10) +
theme_bw() +
theme(legend.position = "bottom")
ggsave(path = "log-transformerte plot/", filename= paste(name, ".png", sep = ""),  dpi = 600, width = 20, height = 10, type = "cairo-png")
}
###### Render log-transformed plots ######
## Series 1
normalized_plot(log_norm_selected_series_1, "log_norm_plott_1", "Log-transformert plot av utvalgte søkeord")
## Series 2
normalized_plot(log_norm_selected_series_2, "log_norm_plott_2", "Log-transformert plot av utvalgte søkeord")
